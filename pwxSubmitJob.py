#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4.1 on Sat Nov 11 10:00:40 2006

import os, copy, re, sys
import wx
import wx.lib.masked as masked

class pwxSubmitJob(wx.Frame):
	def __init__(self,parent, master=None,modelName=None,tellme=None,obj=None,
		nodes=32,usenode='test',doExtract=1,cancelbtn=0, *args, **kwds):
		self.makeMe(master,modelName,tellme,obj,nodes,usenode,doExtract,cancelbtn)
		# begin wxGlade: pwxSubmitJob.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, parent,*args, **kwds)
		self.sizer_7_staticbox = wx.StaticBox(self, -1, "Nodes to use")
		self.sizer_9_staticbox = wx.StaticBox(self, -1, "Use PLC System")
		self.sizer_8_staticbox = wx.StaticBox(self, -1, "Delayed")
		self.sizer_6_staticbox = wx.StaticBox(self, -1, "Script Options")
		self.sizer_3_staticbox = wx.StaticBox(self, -1, "Inputs")
		self.button_1 = wx.Button(self, -1, "Open")
		self.text_ctrl_pathname = wx.TextCtrl(self, -1, "")
		self.spin_ctrl_nodecount = wx.SpinCtrl(self, -1, value=str(self.numNodes), min=0, max=256)
		self.combo_box_plc = wx.ComboBox(self, -1, choices=self.plccAllowed, style=wx.CB_DROPDOWN|wx.CB_SORT)
		self.radio_box_extract = wx.RadioBox(self, -1, "Extract", choices=["None", "EXT400", "EXT300*", "64 Bit"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
		self.radio_box_use_node = wx.RadioBox(self, -1, "System", choices=["PROD", "TEST"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
		self.checkbox_deferred = wx.CheckBox(self, -1, "Deferred")
		self.spin_ctrl_dayofyear = wx.DatePickerCtrl(self, -1)
		#self.spin_ctrl_hour = wx.SpinCtrl(self, -1, "", min=0, max=100)
		self.spin_ctrl_hour = masked.TimeCtrl(self, -1,fmt24hr=True)
		self.text_ctrl_jclcommand = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.HSCROLL)
		self.button_submit = wx.Button(self, -1, "Submit Job")
		self.button_save = wx.Button(self, -1, "Save parameters")
		self.button_read = wx.Button(self, -1, "Start Monitor")
		self.button_quit = wx.Button(self, -1, "Quit")

		self.__set_properties()
		self.__do_layout()
		self.bindCommands() 
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: pwxSubmitJob.__set_properties
		self.SetTitle("Job Submission - Nov 12, 2006 - Kamran Husain")
		self.combo_box_plc.SetSelection(0)
		self.radio_box_extract.SetSelection(3)
		self.radio_box_use_node.SetSelection(1)
		now = wx.DateTime_Now()
		self.spin_ctrl_hour.SetValue(now)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: pwxSubmitJob.__do_layout
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_5 = wx.BoxSizer(wx.VERTICAL)
		sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
		sizer_4 = wx.BoxSizer(wx.VERTICAL)
		sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.VERTICAL)
		sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.HORIZONTAL)
		sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
		sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
		sizer_3.Add(self.button_1, 0, wx.ADJUST_MINSIZE, 0)
		sizer_3.Add(self.text_ctrl_pathname, 1, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
		sizer_1.Add(sizer_3, 0, wx.EXPAND, 0)
		sizer_7.Add(self.spin_ctrl_nodecount, 0, wx.ADJUST_MINSIZE, 0)
		sizer_4.Add(sizer_7, 0, wx.ADJUST_MINSIZE, 0)
		sizer_9.Add(self.combo_box_plc, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_4.Add(sizer_9, 0, wx.EXPAND, 0)
		sizer_4.Add(self.radio_box_extract, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_4.Add(self.radio_box_use_node, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_8.Add(self.checkbox_deferred, 0, wx.ADJUST_MINSIZE, 0)
		sizer_8.Add(self.spin_ctrl_dayofyear, 0, wx.ADJUST_MINSIZE, 0)
		sizer_8.Add(self.spin_ctrl_hour, 0, wx.ADJUST_MINSIZE, 0)
		sizer_4.Add(sizer_8, 1, wx.EXPAND, 0)
		sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
		sizer_5.Add(self.text_ctrl_jclcommand, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_6.Add(self.button_submit, 0, wx.ADJUST_MINSIZE, 0)
		sizer_6.Add(self.button_save, 0, wx.ADJUST_MINSIZE, 0)
		sizer_6.Add(self.button_read, 0, wx.ADJUST_MINSIZE, 0)
		sizer_6.Add(self.button_quit, 0, wx.ADJUST_MINSIZE, 0)
		sizer_5.Add(sizer_6, 0, wx.EXPAND, 0)
		sizer_2.Add(sizer_5, 1, wx.EXPAND, 0)
		sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
		self.SetAutoLayout(True)
		self.SetSizer(sizer_1)
		sizer_1.Fit(self)
		sizer_1.SetSizeHints(self)
		self.Layout()
		# end wxGlade

	def makeMe(self,master,modelName=None,tellme=None,obj=None,nodes=32,usenode='test',doExtract=1,cancelbtn=0):
		self.modelName = modelName 
		self.outputFilename = ''
		self.errorFilename  = ''
		self.tellMaster = tellme
		self.masterObj  = obj
		self.incomingCommand = None
		self.circleOfTrust = ['baddouma', 'husainkb', 'lincx', 'fazaaam', 'dialdiha', 'dossmn0f', 'nahdiua']
		uname = os.getenv('USER')
		self.trustedUser = True
		#if uname in self.circleOfTrust: self.trustedUser  = True
		#
		# Configuration parameters
		#
		self.numNodes = nodes                   # PARM_NUMNODES
		self.use_node = usenode
		self.defaultModelName = ''
		self.commandFilename = ''
		self.jclCommandHandler = None
		self.plccString = 'powers@plcpbs'
		self.plccAllowed = ['powers@plcpbs']  + [ 'parallel@plc'+ i for i in 'defghilm']

	####################################### START OF JOB STRING 
		self.jobString = """#!/bin/sh
#PBS -l nodes=PARM_NUMNODES,walltime=180:00:00
#PBS -N PARM_10MODEL
#PBS -o PARM_SETBINDIRPATH/PARM_10MODEL.out
#PBS -e PARM_SETBINDIRPATH/PARM_10MODEL.err
#TIMEDRUN
#PBS -S /bin/csh
#PBS -M PARM_USER@exchange.aramco.com.sa
#PBS -m ae 
##PBS -q powers@plcpbs
#PBS -q PARM_PLCWHERE

OUTPUTDIR=PARM_SETBINDIRPATH  

MODEL=PARM_MODEL
EX='/red/ssd/appl/powers/PARM_SYSTEM/powers_lnx'
if [ ! -d PARM_PATH ]
then 
mkdir PARM_PATH
fi 

if [ ! -d PARM_PATH/binary ]
then 
mkdir PARM_PATH/binary
fi 

if [ ! -d PARM_PATH/output ]
then 
mkdir PARM_PATH/output
fi 

if [ ! -d PARM_PATH/restart ]
then 
mkdir PARM_PATH/restart
fi 

ONLYIFBINDIRFOUND

if [ ! -d PARM_PATH/data ]
then 
mkdir PARM_PATH/data
fi 


cd    $OUTPUTDIR
touch ${MODEL}.output
mpirun.ch_gm -np PARM_DOUBLECPU -machinefile $PBS_NODEFILE $EX data/${MODEL}.model > ${MODEL}.output


"""

		self.linkToBinDir = "ln -s PARM_MODELPATH $OUTPUTDIR/PARM_SECTORDATA\n"

	####################################### START OF MYEXTRACT STRING 
	# bash /red/ssd/appl/khusain/parallelExtract.ksh PARM_SETBINDIRPATH/PARM_MODEL.smspec PARM_SETBINDIRPATH &
		self.myExtraction = """  
echo "#!/bin/bash" > PARM_MODEL.tu
echo "/red/ssd/appl/khusain/64bit/srcs/extractWithPython.ksh PARM_SETBINDIRPATH/PARM_MODEL .smspec /red/simdata/EXT400/${USER}" >> PARM_MODEL.tu
/bin/bash PARM_MODEL.tu
"""

		self.my32bitExtraction = """ 
echo "#!/bin/bash" > PARM_MODEL.tu
echo "rsh sima '/red/ssd/appl/khusain/extractWithPython.ksh PARM_SETBINDIRPATH/PARM_MODEL .smspec /red/simdata/EXT400/${USER}'" >> PARM_MODEL.tu
/bin/bash PARM_MODEL.tu
"""
	####################################### END OF MYEXTRACT STRING 

		self.myExtr2 = """
echo "PARM_P_EXT bash /red/ssd/appl/khusain/parallelExtract.ksh PARM_SETBINDIRPATH/PARM_MODEL.smspec /red/simdata/EXT400/${USER}" >> PARM_MODEL.EXT
echo "PARM_P_EXT bash /red/ssd/appl/khusain/parallelExtract.ksh PARM_SETBINDIRPATH/PARM_MODEL_mig.smspec /red/simdata/EXT400/${USER}" >> PARM_MODEL.EXT
echo "PARM_P_EXT bash /red/ssd/appl/khusain/parallelExtract.ksh PARM_SETBINDIRPATH/PARM_MODEL_mtb.smspec /red/simdata/EXT400/${USER}" >> PARM_MODEL.EXT
"""
	####################################### START OF ECL EXTRACT STRING 
		self.extractString=""" 
echo "#!/bin/sh" > PARM_MODEL.EXT
echo "#PBS -S /bin/csh" >> PARM_MODEL.EXT
echo "#PBS -N 'a"$PBS_JOBID"'" >> PARM_MODEL.EXT
echo "#PBS -l nodes=1,walltime=8:00:00" >> PARM_MODEL.EXT
echo "#PBS -q serial@simc" >> PARM_MODEL.EXT
echo "/peasapps/ssd/test_lnx/scripts/Linux/PARM_EXTRACTION PARM_MODEL POWERS PARM_SETBINDIRPATH PARM_MODEL" >> PARM_MODEL.EXT
qsub PARM_MODEL.EXT
rsh simc "mv PARM_COMMAND_SCRIPT  PARM_SETBINDIRPATH"
"""

	####################################### END OF JOB STRING 
	def bindCommands(self):
		self.Bind(wx.EVT_BUTTON,self.askOpenFile,self.button_1)
		self.Bind(wx.EVT_BUTTON,self.doSaveAndQuit,self.button_quit)        #  
		self.Bind(wx.EVT_SPINCTRL,self.updateCommand,self.spin_ctrl_nodecount)        #  
		self.Bind(wx.EVT_RADIOBOX,self.updateCommand,self.radio_box_extract)          
		self.Bind(wx.EVT_RADIOBOX,self.updateCommand,self.radio_box_use_node)        #  
		self.Bind(wx.EVT_COMBOBOX,self.updateCommand,self.combo_box_plc)        #  
		self.Bind(wx.EVT_TEXT_ENTER,self.updateCommand,self.combo_box_plc)        #  
		self.Bind(wx.EVT_CHECKBOX,self.updateCommand,self.checkbox_deferred)        #  
		self.Bind(wx.EVT_BUTTON,self.execJobMonitor,self.button_read)        #  
		self.Bind(wx.EVT_BUTTON,self.submitJobHere,self.button_submit)        #  

	def execJobMonitor(self,event):
		if os.fork() == 0: 
			os.execl('/bin/bash',"/bin/bash", "/red/ssd/appl/khusain/64bit/srcs/runMonitor.ksh")

	def submitJobHere(self,event):
		cmd = self.text_ctrl_jclcommand.GetValue()
		self.commandFilename = ''
		
		myfullname = self.text_ctrl_pathname.GetValue() 
		dirName , modelname  = os.path.split(myfullname)

		if len(self.outputFilename) > 0: 
			print "dirName = ", dirName, " and ", self.outputFilename
			dirName = os.path.dirname(self.outputFilename)
		self.commandFilename = self.createCommandShell(cmd,dirName,modelname)
		print "pSubmitJob: runPowersNow: command filename ", self.commandFilename
		os.system('qsub ' + self.commandFilename)
		self.writeStatusToDisk()

	def createCommandShell(self,cmd,dirName,modelname):
		usethis = modelname.replace('.model','')
		try:
			fname = dirName + os.sep + '%s.ksh' % usethis
			fd = open(fname,'w')
			fd.write(cmd)
			cmd = cmd.replace('PARM_COMMAND_SCRIPT',fname)    # IMPORTANT
			#fd.write("#LOOK \nmv " + fname + " $OUTPUTDIR\n")  # Move yourself to the output directory
			fd.close()
		except:		
			fname = os.getenv('HOME') + os.sep + 'powersdata' +  os.sep + '%s.ksh' % usethis
			fd = open(fname,'w')
			cmd = cmd.replace('PARM_COMMAND_SCRIPT',fname)    # IMPORTANT
			fd.write(cmd)
			#fd.write("#LOOK \nmv " + fname + " $OUTPUTDIR\n")  # Move yourself to the output directory
			fd.close()
		return fname
	def updateCommand(self,event):
		self.text_ctrl_jclcommand.SetValue(self.getCommandString())

	def doSaveAndQuit(self,event):
		self.Destroy()

	def askOpenFile(self,event):
		odlg = wx.FileDialog(self,message="Open file", style=wx.OPEN, wildcard="Model File (*.model)|*.model|All Files|*.*", defaultFile="*.model")
		if odlg.ShowModal() == wx.ID_OK:
			ofile = odlg.GetPath()
			self.openFile(ofile)
			
	def openFile(self,ofile):
			self.setDefaultModelFile(ofile)
			self.updateCommand(None)

	def setDefaultModelFile(self,mstr):
		if mstr <> None:
			self.defaultModelName = mstr
			self.text_ctrl_pathname.SetValue(mstr)


	def writeStatusToDisk(self):
		"""
		Writes the status to disk for remembering key simulation parameters. 
		The file is $HOME/powersdata/manager.inf. 
		Caution: This file is used by a lot of other programs so be careful when modifying the 
		contents of the manager.inf file.
		"""
		managerfilename = os.getenv('HOME') + os.sep + 'powersdata' + os.sep + 'manager.inf'
		xlines = open(managerfilename,'r').readlines()
		olines = []
		parms = {}
		parms['NUMNODES'] =  self.spin_ctrl_nodecount.GetValue()
		parms['USENODE'] =  self.radio_box_use_node.GetStringSelection().lower()
		parms['EXTRACT'] =  self.radio_box_extract.GetSelection()

		for xln in xlines: 
			f = xln.find('NUMNODES')
			if f >= 0:
				items = xln.split(':')
				xstr = 'NUMNODES:%d\n' % parms['NUMNODES']
				olines.append(xstr)
				continue
			f = xln.find('USENODE')
			if f >= 0:
				items = xln.split(':')
				xstr = 'USENODE:%s\n' % self.use_node
				olines.append(xstr)
				continue
			f = xln.find('EXTRACT')
			if f >= 0:
				items = xln.split(':')
				xstr = 'EXTRACT:%d\n' % self.radio_box_extract.GetSelection()
				olines.append(xstr)
				continue
			olines.append(xln)	
		fd = open(managerfilename,'w')
		for xln in olines: fd.write(xln)
		fd.close()

		if self.tellMaster <> None: self.tellMaster(self.masterObj,'PARMS',parms)

	def showCommand(self):
		cmd = self.getCommandString()
		self.text_ctrl_jclcommand.SetValue(cmd)

	def runBatchCommand(self,modelNames):
		x = self.tellMaster              # Preserve state
		self.tellMaster = None           # Forget about notifying master
		for name in modelNames:
			cmd = self.getCommandString(name)  # You have the command
			if len(self.outputFilename) > 0: 
				dirName = os.path.dirname(self.outputFilename)
			else:
				dirName = os.getenv('HOME') + '/powersdata/' 
			self.commandFilename = self.createCommandShell(cmd,dirName,os.path.basename(name))
			print "dirName = ", dirName, " and ", name, " and ", self.commandFilename
			os.system('qsub ' + self.commandFilename)
			self.writeStatusToDisk()
		self.tellMaster = x


	def showwarning(self, caption, message): wx.MessageBox(message,caption=caption)
	
	def getCommandString(self,incoming=None):
		"""
		"""
		doit = self.radio_box_extract.GetSelection()
		retstr = self.jobString
		if doit > 0: 
			retstr = '' + self.jobString + '\n' + self.extractString 
		retstr += '' + self.myExtraction 
		#I am concatenation strings here. It's not worth
		#the hassle to use arrays here. 

		if incoming == None: 
			fullName = self.text_ctrl_pathname.GetValue() # + os.sep + self.text_ctrl_basename.GetValue()
			modelName = os.path.basename(fullName)
			if modelName == '': 
				fullName = self.defaultModelName 
			else:
				self.defaultModelName = fullName
		else: 
			fullName = incoming;
		
		fullName = fullName.strip()
		if len(fullName) < 1: return ''

		self.plccString = self.combo_box_plc.GetValue()
		modelName = os.path.basename(fullName)
		modelName = modelName.replace(".model",'')                # Create modelname 

		dirName = os.path.dirname(fullName)
		dirName = dirName.replace('/data','')                     # Replace data completely
		modeldirName = os.path.dirname(fullName)                  # 
		#modeldirName = modeldirName.replace('/data','')          # Get rid of data!
		
		foundBinDir = 0
		self.kornShellFileName = '/red/restart/' + os.getenv('USER') + os.sep + modelName + ".ksh"
		xlines = open(fullName,'r').readlines()
		for iln in xlines:
			ln = iln.strip()
			if len(ln) < 5 : continue
			if ln[0] == '#': continue
			f = ln.find('BINARY_DATA_DIRECTORY')
			if f >= 0: 
				items = ln.split()
				binDataDir  = items[1].replace("'",'')            # Get raw string 
				dirName = binDataDir + '/' + modelName            # Use this instead
				self.kornShellFileName = dirName + ".ksh"
				foundBinDir = 1
				break;

		self.numNodes = self.spin_ctrl_nodecount.GetValue()
		self.use_node =  self.radio_box_use_node.GetStringSelection().lower()
		self.doublecpu = 1
		fcpu = self.plccString[-1]
		if fcpu in ['h','i','l','m']: self.doublecpu = 2

		self.outputFilename = '%s/%s.output' % (dirName,modelName)
		#self.errorFilename  = dirName + '/' + modelName[:9] + '.err'
		retstr = retstr.replace('ONLYIFBINDIRFOUND', self.linkToBinDir)
		if foundBinDir == 1: 
			retstr = retstr.replace('PARM_SETBINDIRPATH', dirName)
			retstr = retstr.replace('PARM_BINDIRPATH',binDataDir)
		else:
			#print "modeldirName = ", modeldirName 
			#print "fullName = ", fullName
			# retstr = retstr.replace('PARM_SETBINDIRPATH', modeldirName)
			dirName = '/red/restart/' + os.getenv('USER') + os.sep + modelName
			retstr = retstr.replace('PARM_SETBINDIRPATH', dirName)
			retstr = retstr.replace('PARM_BINDIRPATH',modeldirName)
		retstr = retstr.replace('PARM_PATH',dirName)
		retstr = retstr.replace('PARM_MODELPATH',modeldirName)
		retstr = retstr.replace('PARM_MODEL',modelName)
		retstr = retstr.replace('PARM_10MODEL',modelName[:9])
		retstr = retstr.replace('PARM_NUMNODES',str(self.numNodes))
		retstr = retstr.replace('PARM_DOUBLECPU','%d' % (int(self.numNodes) * self.doublecpu))
		retstr = retstr.replace('PARM_SYSTEM',self.use_node)
		retstr = retstr.replace('PARM_PLCWHERE',self.plccString)
		retstr = retstr.replace('PARM_USER',os.getenv('USER'))
		################################################################################
		# EXCEPTIONS
		# If the model exists in sector_data then don't append data to the link.
		#
		f = modeldirName.find('sector_data')
		if f >= 0: 
			retstr = retstr.replace('sector_data/data','sector_data')
			retstr = retstr.replace('PARM_SECTORDATA','sector_data')
		else:
			retstr = retstr.replace('PARM_SECTORDATA','data')
		doit = self.radio_box_extract.GetSelection()
		if doit == 1: retstr = retstr.replace('PARM_EXTRACTION','autoext_400')
		if doit == 2: retstr = retstr.replace('PARM_EXTRACTION','autoext_300')
		if doit == 3: 
			retstr = retstr.replace('PARM_EXTRACTION','autoext_a64_mtb')
			retstr = retstr.replace('serial@simc','parallel@simb')

		dt = self.spin_ctrl_dayofyear.GetValue()
		hr = self.spin_ctrl_hour.GetValue()
		fm = hr[:2] + hr[3:5]
		if self.checkbox_deferred.IsChecked():
			timedString = 'PBS -a %04d%02d%02d%s' % \
				(dt.GetYear(),dt.GetMonth(),dt.GetDay(),fm)
		else:
			timedString = '###PBS -a %04d%02d%02d%s' % \
				(dt.GetYear(),dt.GetMonth(),dt.GetDay(),fm)
		
		#tr= self.doTimedRun.get()
		#hourAt = int(self.runAtHour.get())
		#minAt =  int(self.runAtMinute.get())
		#if tr == 0:
		#	timedString = '##PBS -a %s%02d%02d' % (self.runAtDate.get(),hourAt,minAt)
		#else: 
		#	timedString = 'PBS -a %s%02d%02d' % (self.runAtDate.get(),hourAt,minAt)
		#timedString = timedString.replace('/','')
		retstr = retstr.replace('TIMEDRUN',timedString)
		return retstr


	def cancelBtn(self):
		if self.tellMaster <> None: 
			self.tellMaster(self.masterObj,'OBJS',[self.defaultModelName,"",""])
		

# end of class pwxSubmitJob


if __name__ == "__main__":
	#if len(sys.argv) > 1: print sys.argv
	app = wx.PySimpleApp(0)
	wx.InitAllImageHandlers()
	frame_1 = pwxSubmitJob(None, -1, "")
	if len(sys.argv) > 1:frame_1.openFile(sys.argv[1])
	app.SetTopWindow(frame_1)
	frame_1.Show()
	app.MainLoop()
