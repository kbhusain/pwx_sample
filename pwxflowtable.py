#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4.1 on Sun Nov 12 08:24:19 2006

import os, sys, copy, re
import wx
from pObject import *
from pFlowTable import *
from  pylab import *
from pwxSimplePlot import *
from pFlowCnvECLtoPOWERS import *
from pFlowCnvVFPtoPOWERS import *


# ids 


class pOutputWell:
	def __init__(self,name):
		self.name = name
		self.xv = []
		self.bhp = []
		self.whp = []
		self.dpp = []
		self.bp = []
		self.pi = []
	
	def Add(self,x,bhp,whp,dpp):
		self.xv.append(x)
		self.bhp.append(bhp)
		self.whp.append(whp)
		self.dpp.append(dpp)
		self.bp.append(bhp-dpp)
		if dpp > 0: 
			pi = (bhp + whp) / dpp
		else:
			pi = 0.0
		self.pi.append(pi)

	def getLastPIBP(self):
		klen = len(self.pi)	
		for k in range(klen,0,-1):
			p = self.pi[k-1]
			if pi <> 0.0: return pi, self.bp[k-1] 
		return None,None

	def getFirstPIBP(self):
		k = 0
		for pi in self.pi: 
			if pi <> 0.0: return pi, self.bp[k] 
			k = k + 1
		return None,None
		
class pwxFlowTableViewer(wx.Frame):
	def __init__(self, *args, **kwds):

		self.filename = '' 
		self.outputfilename = ''
		self.outputWells = {}
		self.flowparms = None
		self.currentTableName = ''
		self.outlist = []
		Litems = []
		self.allChartWins = {} 
		self.allChartObjs = {}
		self.plot_name = '0'
		self.verbosity = 0
		# begin wxGlade: pwxFlowTableViewer.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.sizer_6_staticbox = wx.StaticBox(self, -1, "Wells")
		self.sizer_8_staticbox = wx.StaticBox(self, -1, "Columns ")
		#self.sizer_9_staticbox = wx.StaticBox(self, -1, "Plotting Commands")
		self.sizer_10_staticbox = wx.StaticBox(self, -1, "Plot Parameters")
		self.sizer_4_staticbox = wx.StaticBox(self, -1, "Flow Tables")
		self.list_box_flowtables = wx.ListBox(self, -1, choices=[])
		self.list_box_wells = wx.ListBox(self, -1, choices=[])
		self.label_3 = wx.StaticText(self, -1, "label_3")
		self.text_ctrl_3 = wx.TextCtrl(self, -1, "")
		self.list_box_3 = wx.ListBox(self, -1, choices=[], style=wx.LB_SINGLE)
		self.label_4 = wx.StaticText(self, -1, "label_4")
		self.text_ctrl_4 = wx.TextCtrl(self, -1, "")
		self.list_box_4 = wx.ListBox(self, -1, choices=[], style=wx.LB_SINGLE)
		self.label_5 = wx.StaticText(self, -1, "label_5")
		self.text_ctrl_5 = wx.TextCtrl(self, -1, "")
		self.list_box_5 = wx.ListBox(self, -1, choices=[], style=wx.LB_SINGLE)
		self.label_6 = wx.StaticText(self, -1, "label_6")
		self.text_ctrl_6 = wx.TextCtrl(self, -1, "")
		self.list_box_6 = wx.ListBox(self, -1, choices=[], style=wx.LB_SINGLE)
		self.radio_box_1 = wx.RadioBox(self, -1, "Select One Column For Y axis", choices=["column1", "column2", "column3", "column4"], majorDimension=4, style=wx.RA_SPECIFY_COLS)

		self.label_1 = wx.StaticText(self, -1, "BP")
		self.text_ctrl_bp = wx.TextCtrl(self, -1, "")
		self.label_2 = wx.StaticText(self, -1, "PI")
		self.text_ctrl_pi = wx.TextCtrl(self, -1, "")
		self.button_plot_inflow = wx.Button(self, -1, "Plot Inflow")
		#jself.daGraph = wx.TextCtrl(self, -1, "")
		self.daGraph = pwxSimpleXYPlotter(self,-1,"") 
		
		# Menu Bar
		self.pwxFTV_menubar = wx.MenuBar()
		self.SetMenuBar(self.pwxFTV_menubar)
		wxglade_tmp_menu = wx.Menu()
		self.mi_openFile = wxglade_tmp_menu.Append(wx.NewId(), "&Open Flow Table", "", wx.ITEM_NORMAL)
		self.mi_writeFile = wxglade_tmp_menu.Append(wx.NewId(), "&Write Flow Table", "", wx.ITEM_NORMAL)
		self.mi_importFile = wxglade_tmp_menu.Append(wx.NewId(), "&Import Flow Table", "", wx.ITEM_NORMAL)
		wxglade_tmp_menu.AppendSeparator()
		self.mi_readOutput = wxglade_tmp_menu.Append(wx.NewId(), "&Read Output File", "", wx.ITEM_NORMAL)
		self.mi_quit = wxglade_tmp_menu.Append(wx.NewId(), "&Quit", "", wx.ITEM_NORMAL)
		self.pwxFTV_menubar.Append(wxglade_tmp_menu, "&File")
		wxglade_tmp_menu = wx.Menu()
		self.mi_convertECL = wxglade_tmp_menu.Append(wx.NewId(), "&Convert ECL", "", wx.ITEM_NORMAL)
		self.mi_deleteFlowTable = wxglade_tmp_menu.Append(wx.NewId(), "&Delete One Flow Table", "", wx.ITEM_NORMAL)
		self.pwxFTV_menubar.Append(wxglade_tmp_menu, "&Tools")
		# Menu Bar end
		
		# Tool Bar
		self.iconpath = '/red/ssd/appl/khusain/64bit/srcs/powers/working/flow/'
		self.pwxFTV_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_DOCKABLE|wx.TB_TEXT)
		self.SetToolBar(self.pwxFTV_toolbar)
		self.mi_clearPlot = self.pwxFTV_toolbar.AddLabelTool(wx.NewId(), "Clear", wx.Bitmap(self.iconpath + "/icon_clear_small.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
		self.mi_onePlot = self.pwxFTV_toolbar.AddLabelTool(wx.NewId(), "One", wx.Bitmap(self.iconpath + "icon_one_small.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Plot One Curve", "")
		self.mi_allPlot = self.pwxFTV_toolbar.AddLabelTool(wx.NewId(), "All", wx.Bitmap(self.iconpath + "icon_all_small.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Plot All Curves", "")
		self.mi_interpolate = self.pwxFTV_toolbar.AddLabelTool(wx.NewId(), "Interpolate", wx.Bitmap(self.iconpath + "icon_inter_small.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Use interpreted value to interpolate", "")
		self.mi_snapshot = self.pwxFTV_toolbar.AddLabelTool(wx.NewId(), "Snapshot", wx.Bitmap(self.iconpath + "icon_snap_small.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Keep plot in new window", "")
		self.pwxFTV_toolbar.AddSeparator()
		self.mi_textBox = self.pwxFTV_toolbar.AddLabelTool(wx.NewId(), "Text", wx.Bitmap(self.iconpath + "icon_text_small.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Show text in an editor", "")
		self.mi_plotWellBHP = self.pwxFTV_toolbar.AddLabelTool(wx.NewId(), "Well BHP", wx.Bitmap(self.iconpath + "icon_bhp_small.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Plot BHP from selected well", "")
		self.mi_plotWellWHP = self.pwxFTV_toolbar.AddLabelTool(wx.NewId(), "Well WHP", wx.Bitmap(self.iconpath + "icon_whp_small.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Plot WHP - Warning: Scale may be too low", "")
		self.mi_plotWellPIBP = self.pwxFTV_toolbar.AddLabelTool(wx.NewId(), "Well PI", wx.Bitmap(self.iconpath + "icon_pbp_small.gif", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Plot PI,BP - Warning: Scale may be too low", "")
		# Tool Bar end
		# Tool Bar end

		self.__set_properties()
		self.__do_layout()

		self.columnWidgets = [[self.label_3, self.text_ctrl_3, self.list_box_3], 
								[self.label_4, self.text_ctrl_4, self.list_box_4], 
								[self.label_5, self.text_ctrl_5, self.list_box_5], 
								[self.label_6, self.text_ctrl_6, self.list_box_6]]


		self.Bind(wx.EVT_LISTBOX, self.handleListBox3, self.list_box_3)
		self.Bind(wx.EVT_LISTBOX, self.handleListBox4, self.list_box_4)
		self.Bind(wx.EVT_LISTBOX, self.handleListBox5, self.list_box_5)
		self.Bind(wx.EVT_LISTBOX, self.handleListBox6, self.list_box_6)
		self.Bind(wx.EVT_LISTBOX, self.handleFlowTableSelect, self.list_box_flowtables)

		self.Bind(wx.EVT_BUTTON, self.mf_plotInflow, self.button_plot_inflow)
		self.Bind(wx.EVT_MENU, self.mmf_openFlowTable,self.mi_openFile)
		self.Bind(wx.EVT_MENU, self.mmf_writeFlowTable, self.mi_writeFile)
		self.Bind(wx.EVT_MENU, self.mmf_importFlowTable, self.mi_importFile)
		self.Bind(wx.EVT_MENU, self.mmf_readOutputFile, self.mi_readOutput)
		self.Bind(wx.EVT_MENU, self.mmf_quit, self.mi_quit)
		self.Bind(wx.EVT_MENU, self.mmf_convertECL, self.mi_convertECL)
		self.Bind(wx.EVT_MENU, self.handleListDelete, self.mi_deleteFlowTable)
		self.Bind(wx.EVT_TOOL, self.mf_clearPlot, self.mi_clearPlot)
		self.Bind(wx.EVT_TOOL, self.mf_plotOne, self.mi_onePlot)
		self.Bind(wx.EVT_TOOL, self.mf_plotAll, self.mi_allPlot)
		self.Bind(wx.EVT_TOOL, self.mf_interpolate, self.mi_interpolate)
		self.Bind(wx.EVT_TOOL, self.mf_snapshot, self.mi_snapshot)
		self.Bind(wx.EVT_TOOL, self.mf_showText, self.mi_textBox)
		self.Bind(wx.EVT_TOOL, self.mf_plotWellBHP, self.mi_plotWellBHP)
		self.Bind(wx.EVT_TOOL, self.mf_plotWellWHP, self.mi_plotWellWHP)
		self.Bind(wx.EVT_TOOL, self.mf_plotWellPIBP, self.mi_plotWellPIBP)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: pwxFlowTableViewer.__set_properties
		self.SetTitle("Flow Table Viewer - Kamran Husain - Nov 13, 2006")
		self.radio_box_1.SetSelection(0)
		self.pwxFTV_toolbar.Realize()
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: pwxFlowTableViewer.__do_layout
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_7 = wx.BoxSizer(wx.VERTICAL)
		sizer_10 = wx.StaticBoxSizer(self.sizer_10_staticbox, wx.HORIZONTAL)
		#sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.HORIZONTAL)
		sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.HORIZONTAL)
		sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_15 = wx.BoxSizer(wx.VERTICAL)
		sizer_14 = wx.BoxSizer(wx.VERTICAL)
		sizer_13 = wx.BoxSizer(wx.VERTICAL)
		sizer_12 = wx.BoxSizer(wx.VERTICAL)
		sizer_3 = wx.BoxSizer(wx.VERTICAL)
		sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.VERTICAL)
		sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
		sizer_4.Add(self.list_box_flowtables, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
		sizer_6.Add(self.list_box_wells, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_3.Add(sizer_6, 1, wx.EXPAND, 0)
		sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)
		sizer_12.Add(self.label_3, 0, wx.ADJUST_MINSIZE, 0)
		sizer_12.Add(self.text_ctrl_3, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_12.Add(self.list_box_3, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_8.Add(sizer_12, 1, wx.EXPAND, 0)
		sizer_13.Add(self.label_4, 0, wx.ADJUST_MINSIZE, 0)
		sizer_13.Add(self.text_ctrl_4, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_13.Add(self.list_box_4, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_8.Add(sizer_13, 1, wx.EXPAND, 0)
		sizer_14.Add(self.label_5, 0, wx.ADJUST_MINSIZE, 0)
		sizer_14.Add(self.text_ctrl_5, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_14.Add(self.list_box_5, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_8.Add(sizer_14, 1, wx.EXPAND, 0)
		sizer_15.Add(self.label_6, 0, wx.ADJUST_MINSIZE, 0)
		sizer_15.Add(self.text_ctrl_6, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_15.Add(self.list_box_6, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_8.Add(sizer_15, 1, wx.EXPAND, 0)
		sizer_7.Add(sizer_8, 0, wx.EXPAND, 0)
		#sizer_7.Add(self.radio_box_1, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)

		#sizer_9.Add(self.button_raw, 0, wx.ADJUST_MINSIZE, 0)
		#sizer_9.Add(self.button_plot_one, 0, wx.ADJUST_MINSIZE, 0)
		#sizer_9.Add(self.button_plot_all, 0, wx.ADJUST_MINSIZE, 0)
		#sizer_9.Add(self.button_interpolate, 0, wx.ADJUST_MINSIZE, 0)
		#sizer_9.Add(self.button_snapshot, 0, wx.ADJUST_MINSIZE, 0)
		#sizer_9.Add(self.button_plot_well_copy, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		#sizer_7.Add(sizer_9, 0, wx.EXPAND, 0)
		sizer_10.Add(self.label_1, 0, wx.ADJUST_MINSIZE, 0)
		sizer_10.Add(self.text_ctrl_bp, 0, wx.ADJUST_MINSIZE, 0)
		sizer_10.Add(self.label_2, 0, wx.ADJUST_MINSIZE, 0)
		sizer_10.Add(self.text_ctrl_pi, 0, wx.ADJUST_MINSIZE, 0)
		sizer_10.Add(self.button_plot_inflow, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_11.Add(self.radio_box_1, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_11.Add(sizer_10, 1, wx.EXPAND)
		sizer_7.Add(sizer_11, 0, wx.EXPAND, 0)
		sizer_7.Add(self.daGraph, 1, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
		sizer_2.Add(sizer_7, 1, wx.EXPAND, 0)
		sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
		self.SetAutoLayout(True)
		self.SetSizer(sizer_1)
		sizer_1.Fit(self)
		sizer_1.SetSizeHints(self)
		self.Layout()
		# end wxGlade

	def mf_clearPlot(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		self.daGraph.clearPlots()	

	def mf_showText(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		if os.fork() == 0:
			os.execl('/usr/X11R6/bin/gvim','gvim', self.filename)

	def mf_plotOne(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		self.doSinglePlot()

	def mf_plotAll(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		self.doOneVariablePlot()

	def mf_snapshot(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		self.createNewPlot(event)

	def createNewPlot(self,event):
		name = str(int(self.plot_name) + 1)
		self.plot_name = name 
		if not self.allChartWins.has_key(name):
			self.allChartWins[name], self.allChartObjs[name] = self.createChartObject(name)

	def createChartObject(self,caption, invulnerable=0):
		if invulnerable == 0:
			chartDisplay = pwxPlotHolder(None,-1,caption,style=wx.DEFAULT_FRAME_STYLE)
		else:
			chartDisplay = pwxPlotHolder(None,-1,caption,\
				style=wx.MAXIMIZE_BOX|wx.MINIMIZE_BOX|wx.RESIZE_BORDER)
		chartDisplay.Bind(wx.EVT_CLOSE,self.handleDeadPlot,chartDisplay)
		chartDisplay.Show()
		chartObject = chartDisplay.getChartObject()
		#
		# Copy everything from self.daChart into it.
		#
		for plt in self.daGraph.m_plots:
			chartObject.setnumarrayData(plt.name,plt.m_vector_x, plt.m_vector_y)	
		return chartDisplay, chartObject

	def handleDeadPlot(self,event):
		# A window has just died .. 
		obj = event.GetEventObject()
		for i in self.allChartWins.keys():
			if self.allChartWins[i] == obj:
				print "Removing...", i
				#self.allChartWins[i].Destroy()
				#self.allChartObjs[i].Destroy()
				del self.allChartWins[i] 
				del self.allChartObjs[i]
		obj.Destroy()
	
	def mf_plotInflow(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		tpi = self.text_ctrl_pi.GetValue()
		tbp = self.text_ctrl_bp.GetValue()
		try:
			pi = float(tpi)
			bp = float(tbp)
		except:
			self.showwarning('Attention!','Your input values are not correct.')
			return
		self.doInflowPlot(pi,bp)

	def mmf_readOutputFile(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		dlg = wx.FileDialog(self,'Read Model Output', '/red/restart/' + os.getenv('USER'), 
				style=wx.OPEN,
				wildcard='Well Output (*.well_output)|*.well_output|All Files (*.*)|*')
		if dlg.ShowModal() <> wx.ID_OK: 
			dlg.Destroy()
			return
		dlg.Destroy()
		self.outputfilename= dlg.GetPath()
		self.outputWells = {}
		xlines = open(self.outputfilename,'r').readlines()
		k = 0
		for xl in xlines: 
			if xl[:4] == 'Name': break 
			k = k + 1
		xlines = xlines[k+1:]
		for xl in xlines: 
			items = xl.split()
			if len(items) < 11: continue
			wellName = items[0]
			if not self.outputWells.has_key(wellName):
				self.outputWells[wellName] = pOutputWell(wellName)
			pWell = self.outputWells[wellName]
			xv  = float(items[5]) + float(items[6])
			bhp = float(items[11])          # BHP 
			whp = float(items[12])          # WHP
			dpp = float(items[13])          # DPP
			pWell.Add(xv,bhp,whp,dpp)

		wellNames = self.outputWells.keys()
		wellNames.sort()
		self.list_box_wells.Set(wellNames)

	def mf_plotWellBHP(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		name = self.list_box_wells.GetStringSelection()
		pWell = self.outputWells[name]
		fname = os.path.basename(self.outputfilename)	
		self.daGraph.setTupleData(pWell.name+" BHP vs. LIQ" + fname,pWell.xv,pWell.bhp,linetype='--')

	def mf_plotWellWHP(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		name = self.list_box_wells.GetStringSelection()
		pWell = self.outputWells[name]
		fname = os.path.basename(self.outputfilename)	
		self.daGraph.setTupleData(pWell.name+" WHP vs.LIQ" + fname,pWell.xv,pWell.whp,linetype='--')

	def mf_plotWellPIBP(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		name = self.list_box_wells.GetStringSelection()
		pWell = self.outputWells.get(name,None)
		if pWell == None: 
			self.showwarning('Attention!','Read in a well_output file first to get well data.')
			return
		pi,bp = pWell.getFirstPIBP()
		if pi == None: 
			self.showwarning('Attention!','Unable to find a pi value of greater than 0.0.')
			return
		fname = os.path.basename(self.outputfilename)	
		self.doInflowPlot(pi,bp,fname)
		lpi,bp = pWell.getLastPIBP()
		if lpi == pi:
			self.showwarning('Attention!','Unable to find a second pi value of greater than 0.0.')
			return
		if lpi <> None: 
			fname = os.path.basename(self.outputfilename)	
			self.doInflowPlot(lpi,bp,fname)

	def mmf_openFlowTable(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		dlg = wx.FileDialog(self,'Read Flow Table', os.getcwd(), style=wx.OPEN,
						wildcard='FG2 (*.fg2)|*.fg2|Flow (*.che)|*.che|Flow (flot)|*.fl*t|All Files (*.*)|*')
		if dlg.ShowModal() <> wx.ID_OK: 
			dlg.Destroy()
			return
		dlg.Destroy()
		fname = dlg.GetPath()
		self.filename = fname 
		self.doFlowTableRead(fname)

	def handleListBox3(self,event): self.text_ctrl_3.SetValue(event.GetString())
	def handleListBox4(self,event): self.text_ctrl_4.SetValue(event.GetString())
	def handleListBox5(self,event): self.text_ctrl_5.SetValue(event.GetString())
	def handleListBox6(self,event): self.text_ctrl_6.SetValue(event.GetString())

	def handleFlowTableSelect(self,event):
		if self.flowparms == None: return 
		self.currentTableName = event.GetString() 
		self.currentTable = self.flowparms.tablesArray[self.currentTableName]
		self.showTableInForm()


	def handleListDelete(self,event):
		obj = self.list_box_flowtables
		name = obj.GetStringSelection()
		dlg = wx.MessageDialog(None,"Delete "+name,"Are you sure",wx.YES_NO|wx.ICON_QUESTION)
		retcode = dlg.ShowModal()
		if retcode == wx.ID_YES:
			del self.flowparms.tablesArray[name]
			names = self.flowparms.tablesArray.keys()
			names.sort()
			self.list_box_flowtables.Set(names)


	def showTableInForm(self):
		if (self.currentTable == None): return 
		self.names     = self.currentTable.getNames()
		self.xaxisname = self.names[-1]
		self.vectors = self.currentTable.getVectors()
		self.myarray = self.currentTable.getData()
		print self.names
		rng = range(len(self.names)-1)
		for k in rng:
			lbl, txt, lst = self.columnWidgets[k]
			nm = self.names[k]
			sv = map(str,self.vectors[nm])
			lbl.SetLabel(nm)
			lst.Set(sv)
			txt.SetValue(sv[0])
			self.radio_box_1.SetItemLabel(k,self.names[k])

	def mapObjToGui(self,flowparms):
		self.flowparms = flowparms
		names = flowparms.tablesArray.keys()
		names.sort()
		self.list_box_flowtables.Set(names)

	def doFlowTableRead(self,fname,useNew=1):
		a = flowTableReader()   
		if useNew == 1:
			a.readFile(fname)
		else:
			a.readFile(fname,self.flowparms)
		os.chdir(os.path.dirname(fname))
		self.mapObjToGui(a.flowTableObject)

	def mmf_writeFlowTable(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		dlg = wx.FileDialog(self,'Save to Flow Table', os.getcwd(), style=wx.SAVE|wx.OVERWRITE_PROMPT,
						wildcard='FlowTable (*.fg2)|*.fg2|All Files (*.*)|*')
		if dlg.ShowModal() <> wx.ID_OK: 
			dlg.Destroy()
			return
		fname = dlg.GetPath()
		fd = open(ofname,'w')
		retstr = self.flowparms.getEditableString(showHeader=1)
		fd.write(retstr)
		fd.close()

	def mmf_importFlowTable(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		dlg = wx.FileDialog(self,'Import Flow Table', os.getcwd(), style=wx.OPEN,
						wildcard='FG2 (*.fg2)|*.fg2|Flow (*.che)|*.che|Flow (flot)|*.fl*t|All Files (*.*)|*')
		if dlg.ShowModal() <> wx.ID_OK: 
			dlg.Destroy()
			return
		dlg.Destroy()
		fname = dlg.GetPath()
		self.doFlowTableRead(fname,useNew=0)


	def mmf_quit(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		names = self.allChartWins.keys() 
		print "destroying ..", names
		for nm in names: self.allChartWins[nm].Destroy()
		self.Destroy()

	def mmf_convertECL(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		# Ask for filenames...
		dlg = wx.FileDialog(self,'Read Flow Table', os.getcwd(), style=wx.OPEN,
						wildcard='VFP (*.vfp)|*.vfp|ECL (*.ecl)|*.ecl|All Files (*.*)|*')
		if dlg.ShowModal() <> wx.ID_OK: 
			dlg.Destroy()	
			return
		inputfilename = dlg.GetPath()
		dlg.Destroy()	
		dlg = wx.FileDialog(self,'Save to Flow Table', os.getcwd(), style=wx.SAVE|wx.OVERWRITE_PROMPT,
						wildcard='FlowTable (*.fg2)|*.fg2|All Files (*.*)|*')
		if dlg.ShowModal() <> wx.ID_OK: 
			dlg.Destroy()	
			return
		ofile = dlg.GetPath()
		os.chdir(os.path.dirname(ofname))
		nm, ext = os.path.splitext(fname)
		if ext in ['.VFP','.vfp']:
			a = pVFPtableConverter()
			a.readFile(fname)
			fdout = open(ofname,'w')
			a.dumpForPowers(fdout,a.tablename)
			fdout.close()
		elif ext in ['.ECL','.ecl']:
			#tablename = askstring("Enter name for table", "No spaces")
			#if tablename == '': return
			tablename = "ECL_" + nm[:5]
			a = pEclFlowTable()
			a.readFile(fname)
			fdout = open(ofname,'w')
			a.dumpForPowers(fdout,tablename)
			fdout.close()
		event.Skip()	

	def mf_interpolate(self, event): # wxGlade: pwxFlowTableViewer.<event_handler>
		self.doInterpolation()

	#################################################################
	# Plots the 
	#################################################################
	def showwarning(self, caption, message): wx.MessageBox(message,caption=caption)

	def doInflowPlot(self,pi,bp,instr='INFLOW'):
		"""
		pi is the slope .
		bp is y intercept.
		"""
		if self.vectors == None: 
			self.showwarning('Attention!','Plot some flow table for me to get an X axis first.')
			return 
		xdata = self.vectors[self.xaxisname]
		ydata = []  
		for x in xdata:
			y = bp - x/pi 
			ydata.append(y)
		xstr = instr + " BP=" +  str(bp) +  ' PI=' + str(pi)
		self.daGraph.setTupleData(xstr,xdata,ydata,linetype='--')

	#################################################################
	# Recursive function sets the longlist to combination.
	#################################################################
	def makeLongLists(self,useme, base):
		if len(useme) < 1: 
			#print "len == 0", useme
			return
		if len(useme) == 1:
			for obj in useme[0]:
				z = base[:]
				z.append(obj)
				self.outlist.append(z)
			return 
		for obj in useme[0]:
			z = base[:]
			z.append(obj)
			self.makeLongLists(useme[1:],z)


	def doOneVariablePlot(self):
		fixedColumn = self.radio_box_1.GetSelection() 
		fixedKey    = self.radio_box_1.GetStringSelection()
		self.outlist = []
		base = []
		self.ivectors = [] 
		lbl_1 = ""
		for xlbl, txt, lst  in self.columnWidgets: 
			nm = xlbl.GetLabel()
			if nm == fixedKey: 
				z = range(len(self.vectors[nm]))         # For this guy make it all
			else: 
				fixedValue = float(txt.GetValue())              # Get the index for value too.
				values = self.vectors[nm]                # Get their values for indexing
				try:
					fixedIndex = values.index(fixedValue)    # Just the shown value only
				except: 
					self.showwarning('Attention!','Your input values are not correct.')
					return 
				z = [fixedIndex]                         # Make it a one dimensional array
			self.ivectors.append(z)


		##################################################################
		# Now you can make a list of all indices of vectors 
		##################################################################
		#print self.ivectors
		self.makeLongLists(self.ivectors, base)   # RECURSIVE, sets ivectors up!!
		#print self.outlist

		titleStr = ''
		xdata = self.vectors[self.xaxisname]
		#print xdata
		self.daGraph.setXtitle(self.xaxisname)
		m = 0   # for tracking outlist
		for indices in self.outlist:
			lbl = self.currentTableName + ':'
			i = 0
			for k in indices: 	
				nm     = self.names[i] 
				vector = self.vectors[nm]
				if nm == fixedKey: 
					lbl = self.currentTableName + ':' + nm + '=' + str(vector[k]) + ' '
					#lbl = nm + '=' + str(vector[k]) + ' '
				if m == 0 and nm <> fixedKey: 
					titleStr += nm + '=' + str(vector[k]) + ' '
				i = i + 1
			useindices = tuple(indices)
			ydata = self.myarray[useindices]
			self.daGraph.setPlotToDraw(lbl)
			self.daGraph.setMarker('o')                    # Unless we kill it later.
			self.daGraph.setTupleData(lbl,xdata,ydata)
			m = m + 1
		titleStr = self.currentTableName + ":" + titleStr
		
		self.daGraph.showGrid()
		self.daGraph.setTitle(titleStr)
		self.daGraph.setXtitle('STB/DAY')         
		self.daGraph.setYtitle('Pressure')         
		
		
	def doSinglePlot(self):
		indices = []                       # What to pick up.
		lbl = ""                           # What to show in label 
		k = 0	                           # for cycling thru names
		lbl_1 = ""
		for lbl, txt, lst  in self.columnWidgets: 
			nm = lbl.GetLabel()
			floatText  = txt.GetValue()
			fv = float(floatText)
			fvtable = self.vectors[nm]      # Get the map of values
			lbl_1 =  lbl_1 + nm + "=" + floatText + " "
			try:
				iv = fvtable.index(fv)          # Get the array dimension
				indices.append(iv)
			except:
				self.doOutflowPlot();
				return 
			k = k + 1

		#print lbl
		#print indices
		#print self.myarray.shape


		xdata = self.vectors[self.xaxisname]
		ydata = self.myarray[tuple(indices)]
		#print "X=", xdata
		#print "Y=", ydata
		self.daGraph.setPlotToDraw(lbl_1)
		self.daGraph.setMarker('o')                    # Unless we kill it later.
		self.daGraph.setTupleData(lbl_1,xdata,ydata)
		self.daGraph.setXtitle('STB/DAY')         
		self.daGraph.setYtitle('Pressure')         
		self.daGraph.setTitle(self.currentTableName ) 
		self.daGraph.showGrid() 

	def doInterpolation(self):
		outflowLabel = '' 
		Ranges = []       # For the index ranges to interpolate against.
		for lbl, txt, lst  in self.columnWidgets: 
			nm = lbl.GetLabel()
			floatText  = txt.GetValue()
			fixedValue = float(txt.GetValue())
			values = self.vectors[nm]                # Get their values in this index
			outflowLabel +=  nm + '=' + floatText + ' '
			if fixedValue <= values[0]:              # Use the least value
					Ranges.append([nm,fixedValue,0,0,values[0],values[0],1.0,0.0])
					continue
			if fixedValue >= values[-1]:             # Use the most value
					j = len(values) - 1
					Ranges.append([nm,fixedValue,j,j,values[j],values[j],0.0,1.0])
					continue
			for j in range(len(values)):
				if values[j] > fixedValue:                   # Precise values were gone above
					wR = (values[j] - values[j-1])           # deltaX 
					w1 = (fixedValue - values[j-1])/wR       # for weighted average (xp-xi)/deltaX
					w2 = (values[j] - fixedValue)/wR         # Essentially not required 
					Ranges.append([nm,fixedValue,j-1,j,values[j-1],values[j],w1,w2])
					break;
		
		if self.verbosity > 0: 
			print "I have to interpolate between the following values"
			for d in Ranges: print d
			
		ivectors = []         # Must be in same order as weights array
		base = [] 		     # Place holder for makeLongLists call
		weights = []         # Must be in same order as ivectors array
		
		for d in Ranges:
			nm,fv,i,j,v1,v2,w1,w2 = d
			if self.verbosity > 1: print nm,fv,i,j,v1,v2,w1,w2 
			if i==j:
				ivectors.append([i,i])
			else:
				ivectors.append([i,j])
			weights.append([w1,w2])
		
		if self.verbosity > 0: 
			print "ivectors ", ivectors               
			print "weights  ", weights
		
		self.outlist = []                    # Must clear!
		self.makeLongLists(ivectors, base)   # RECURSIVE, sets self.outlist
		
		if self.verbosity > 1: print self.outlist					 
		#if len(self.outlist) == 1: self.doOneVariablePlot(); return
		if len(self.outlist) == 1: self.doSinglePlot(); return
		#
		# Now you have the indices for the initial processing.
		# The items in self.outlist will always be pairs. 
		#
		xdata = self.vectors[self.xaxisname]
		processQueue = [] # For inherent processing required 
		
		m  = 0   # for tracking outlist
		ri = 0   # ranges index.
		wtIndex = 0
		thisList = self.outlist[:]
		
		if self.verbosity > 0: print "WEIGHTS = ", weights
		nw1,nw2 = weights.pop()   
					#
		while(len(thisList)) > 0: 
			indices = thisList.pop(0)
			#nm,fv,ni,nj,v1,v2,w1,w2 = Ranges[ri]
			if self.verbosity > 1: print m, indices
			y1 = self.myarray[tuple(indices)]   # Then get the y1 data
			indices = thisList.pop(0)
			y2 = self.myarray[tuple(indices)]   # for y2
			if self.verbosity > 1: print m+1, indices
			processQueue.append([y1,y2,nw1,nw2,ri])  #
			m = m + 2
			ri = ri + 1
			
		if self.verbosity >= 2:
			print "INITIAL PROCESS QUEUE *** ", wtIndex
			print "weights = ", weights
			for k in processQueue:
				y1,y2,w1,w2,ri = k
				print y1,'*',w1,y2,'*',w2,ri
			print "------"
		
			
		done = 0
		if len(weights) == 0: done = 1;
		nw1,nw2 = weights.pop()               # Get wts for next step
	
		while done <> 1: 
			xln = len(processQueue)
			if xln == 1: break;
			while xln > 1:     
				y1,y2,w1,w2,ri = processQueue.pop(0) # Remove from front 
				yave1 = []
				for m in range(len(y1)):
					v1 = y1[m]
					v2 = y2[m]
					# yave1.append(v1 * w1 + v2 * w2) 
					yave1.append(v1 + (v2 - v1) * w1)    # For simple linear interpolation. 
				y1,y2,w1,w2,ri = processQueue.pop(0)
				yave2 = []
				for m in range(len(y1)):
					v1 = y1[m]
					v2 = y2[m]
					# yave2.append(v1 * w1 + v2 * w2) 
					yave2.append(v1 + (v2 - v1) * w1)    # For simple linear interpolation. 
				processQueue.append([yave1,yave2,nw1,nw2,ri])      #
				xln = xln - 2
			if len(weights) == 0: break;
			
			if self.verbosity > 1:print "WEIGHTS = ", weights
			nw1,nw2 = weights.pop()   # from the end
			if self.verbosity > 1:print "Popping wts ", nw1, nw2
		
			# DEBUG
			if self.verbosity >= 2:
				print "*** PROCESS QUEUE *** "
				for k in processQueue:
					y1,y2,w1,w2,ri = k
					print y1,'*',w1,y2,'*',w2,ri
				print "------"
				
		# Clean up.			
		y1,y2,w1,w2,ri = processQueue.pop()
		ydata = []
		for m in range(len(y1)):
			v1 = y1[m]
			v2 = y2[m]
			#ydata.append(v1 * w1 + v2 * w2)     # for weighted averages.
			ydata.append(v1 + (v2 - v1) * w1)    # For simple linear interpolation. 
			m = m + 1

		if self.verbosity > 1:
			print "xdata  ", xdata, "\nydata  ", ydata

		lbl = outflowLabel
		self.daGraph.setPlotToDraw(lbl)
		marker = self.daGraph.getMarker()
		symbol = self.daGraph.getSymbol()
		self.daGraph.setTupleData(lbl,xdata,ydata)
		#titleStr = self.currentTableName + ":" + titleStr
		#self.daGraph.setTitle(titleStr)
		self.daGraph.forceMarkerType('.',3)
		self.daGraph.setXtitle('STB/DAY')         
		self.daGraph.setYtitle('Pressure')         
		self.daGraph.showGrid()
		

# end of class pwxFlowTableViewer


if __name__ == "__main__":
	app = wx.PySimpleApp(0)
	wx.InitAllImageHandlers()
	pwxFTV = pwxFlowTableViewer(None, -1, "")
	app.SetTopWindow(pwxFTV)
	#pwxFTV.SetBackgroundColour("#CCCCCC")
	if len(sys.argv) > 1: pwxFTV.doFlowTableRead(sys.argv[1])
	pwxFTV.Show()
	app.MainLoop()
